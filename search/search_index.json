{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to CGMetadata's Documentation","text":"<p>Read and write image metadata on macOS from Python using the native ImageIO / Core Graphics frameworks.</p> <p>CGMetadata is a Python wrapper around the macOS ImageIO and Core Graphics frameworks. It provides a simple interface for reading and writing image metadata, including EXIF, IPTC, and XMP data. Reading is supported for all image formats supported by ImageIO.</p> <p>Writing is not currently supported for RAW file formats.  Writing of metadata has been tested on JPEG, PNG, TIFF, and HEIC files however it should be considered experimental. If you are using CGMetadata to write metadata to image files, please make sure you have tested the results before using it in production.</p> <p>Video formats are not currently supported.</p>"},{"location":"#source-code","title":"Source Code","text":"<p>The source code for this project is available on GitHub.</p>"},{"location":"#installation","title":"Installation","text":"<p>or via pip:</p> <pre><code>    pip3 install cgmetadata \n</code></pre>"},{"location":"#license","title":"License","text":"<p>CGMetadata is published under the MIT license, Copyright (c) 2023, Rhet Turnbull.</p>"},{"location":"cli/","title":"Command Line Interface","text":"<p>The package will install a small command line utility, <code>cgmd</code>, which prints metadata for an image file in tabular, JSON, CSV, or TSV formats.</p> <pre><code>usage: cgmd [-h] [--version] [--csv] [--tsv] [--json] [--indent INDENT] IMAGE\n\nPrint metadata for image files in various formats.\n\npositional arguments:\n  IMAGE                 path to image file\n\noptions:\n  -h, --help            show this help message and exit\n  --version, -v         show program's version number and exit\n  --csv, -c             output as comma separated values (CSV)\n  --tsv, -t             output as tab separated values (TSV)\n  --json, -j            output as JSON\n  --indent INDENT, -i INDENT\n                        indent level for JSON; default 4, use 0 for no indentation\n</code></pre>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#imagemetadata","title":"ImageMetadata","text":"<p>Read and write image metadata properties using native macOS APIs.</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>FilePath</code> <p>The path to the image file.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the file does not exist.</p> <code>ValueError</code> <p>If the file is not an image file.</p> Source code in <code>cgmetadata/classes.py</code> <pre><code>class ImageMetadata:\n    \"\"\"Read and write image metadata properties using native macOS APIs.\n\n    Args:\n        filepath: The path to the image file.\n\n    Raises:\n        FileNotFoundError: If the file does not exist.\n        ValueError: If the file is not an image file.\n    \"\"\"\n\n    def __init__(self, filepath: FilePath):\n        self.filepath = pathlib.Path(filepath).resolve()\n        if not self.filepath.exists():\n            raise FileNotFoundError(f\"File not found: {self.filepath}\")\n        if not is_image(self.filepath):\n            raise ValueError(f\"Not an image file: {self.filepath}\")\n        self._context_manager = False\n        self._load()\n\n    @property\n    def properties(self) -&gt; dict[str, Any]:\n        \"\"\"Return the metadata properties dictionary from the image.\n\n        The dictionary keys are named 'IPTC', 'EXIF', etc.\n        Some of the values are themselves dictionaries.\n        For example, the 'IPTC' value is a dictionary of IPTC metadata.\n\n        Reference: https://developer.apple.com/documentation/imageio/image_properties?language=objc\n        for more information.\n        \"\"\"\n\n        # change keys to remove the leading '{' and trailing '}'\n        # e.g. '{IPTC}' -&gt; 'IPTC' but only if the key starts with '{'\n        # also change Exif -&gt; EXIF, WebP -&gt; WEBP to match the other keys\n        properties = CFDictionary_to_dict(self._properties)\n        properties = {\n            key[1:-1] if key.startswith(\"{\") else key: value\n            for key, value in properties.items()\n        }\n        if \"Exif\" in properties:\n            properties[\"EXIF\"] = properties.pop(\"Exif\")\n        if \"WebP\" in properties:\n            properties[\"WEBP\"] = properties.pop(\"WebP\")\n        return properties\n\n    @property\n    def exif(self) -&gt; dict[str, Any]:\n        \"\"\"Return the EXIF properties dictionary from the image.\"\"\"\n        return self.properties.get(EXIF, {})\n\n    @property\n    def iptc(self) -&gt; dict[str, Any]:\n        \"\"\"Return the IPTC properties dictionary from the image.\"\"\"\n        return self.properties.get(IPTC, {})\n\n    @property\n    def tiff(self) -&gt; dict[str, Any]:\n        \"\"\"Return the TIFF properties dictionary from the image.\"\"\"\n        return self.properties.get(TIFF, {})\n\n    @property\n    def gps(self) -&gt; dict[str, Any]:\n        \"\"\"Return the GPS properties dictionary from the image.\"\"\"\n        return self.properties.get(GPS, {})\n\n    @property\n    def xmp(self) -&gt; dict[str, Any]:\n        \"\"\"Return the XMP metadata dictionary for the image.\n\n        The dictionary keys are in form \"prefix:name\", e.g. \"dc:creator\".\n        \"\"\"\n        return metadata_dictionary_from_image_metadata_ref(self._metadata_ref)\n\n    def xmp_dumps(self, header: bool = True) -&gt; str:\n        \"\"\"Return the serialized XMP metadata for the image.\n\n        Args:\n            header: If True, include the XMP packet header in the serialized XMP.\n\n        Returns:\n            The serialized XMP metadata for the image as a string.\n        \"\"\"\n        xmp = metadata_ref_serialize_xmp(self._metadata_ref).decode(\"utf-8\")\n        if header:\n            xmp = f\"{XMP_PACKET_HEADER}\\n{xmp}\\n{XMP_PACKET_FOOTER}\"\n        return xmp\n\n    def xmp_dump(self, fp: IO[str], header: bool = True):\n        \"\"\"Write the serialized XMP metadata for the image to a file.\n\n        Args:\n            fp: The file pointer to write the XMP metadata to.\n            header: If True, include the XMP packet header in the serialized XMP.\n        \"\"\"\n        xmp = metadata_ref_serialize_xmp(self._metadata_ref).decode(\"utf-8\")\n        if header:\n            xmp = XMP_PACKET_HEADER + xmp + XMP_PACKET_FOOTER\n        fp.write(xmp)\n\n    def xmp_loads(self, xmp: str):\n        \"\"\"Load XMP metadata from a string.\n\n        Args:\n            xmp: The XMP metadata as a string.\n            fix_quotes: If True, replace single quotes with double quotes.\n\n        Note:\n            This does not write the metadata to the image file.\n            Use write() to write the loaded metadata to the image file.\n            The XMP standard allows quoted strings to use either single or double quotes.\n            For example, exiftool uses single quotes. However, the native macOS APIs\n            (CGImageMetadataCreateFromXMPData) returns nil if the XMP data contains single quotes.\n            This does not appear to be documented anywhere in the Apple documentation.\n            This function replaces single quotes with double quotes to avoid this issue.\n        \"\"\"\n        self._xmp_set_from_str(xmp)\n\n    def xmp_load(self, fp: IO[str]):\n        \"\"\"Load XMP metadata from a file.\n\n        Args:\n            fp: The file pointer to read the XMP metadata from.\n\n        Note:\n            This does not write the metadata to the image file.\n            Use write() to write the loaded metadata to the image file.\n            The XMP standard allows quoted strings to use either single or double quotes.\n            For example, exiftool uses single quotes. However, the native macOS APIs\n            (CGImageMetadataCreateFromXMPData) returns nil if the XMP data contains single quotes.\n            This does not appear to be documented anywhere in the Apple documentation.\n            This function replaces single quotes with double quotes to avoid this issue.\n        \"\"\"\n        xmp = fp.read()\n        self._xmp_set_from_str(xmp)\n\n    def set(\n        self,\n        group: Literal[\"EXIF\", \"IPTC\", \"TIFF\", \"GPS\", \"XMP\"],\n        key: str,\n        value: Any,\n    ):\n        \"\"\"Set a metadata property for the image.\n\n        Args:\n            group: The metadata group type to set the property for, for example, \"IPTC\", \"XMP\"\n            key: The key or key path of the metadata property to set;\n                for \"XMP\" metadata, the key is in form \"prefix:name\", e.g. \"dc:creator\", \"dc:description\"...\n                for other metadata, the key is the name of the property, e.g. \"LensModel\", \"Make\", \"Keywords\"...\n            value: The value to set the metadata property to.\n\n        Note:\n            This does not write the metadata to the image file unless used in conjunction with the context manager.\n            Use write() to write the metadata to the image file after setting one or more values.\n            Metadata keys may be specified as a literal string, e.g. \"LensModel\" or using\n            one of the constants from the ImageIO module, e.g. kCGImagePropertyExifLensModel,\n            which are referenced here: https://developer.apple.com/documentation/imageio/exif_dictionary_keys\n            These are available in the pyobjc Quartz module as Quartz.kCGImagePropertyExifLensModel, etc.\n            You are responsible for passing the correct type of value for the metadata key,\n            for example, str or list[str]. See https://github.com/adobe/xmp-docs/tree/master\n            for more information on XMP metadata and expected types.\n        \"\"\"\n        if group == XMP:\n            self._metadata_ref = metadata_ref_set_tag_with_path(\n                self._metadata_ref, key, value\n            )\n        else:\n            self._metadata_ref = metadata_ref_set_tag_for_dict(\n                self._metadata_ref, group, key, value\n            )\n\n    def write(self):\n        \"\"\"Write the metadata to the image file then reloads the metadata from the image.\"\"\"\n        metadata_ref_write_to_file(self.filepath, self._metadata_ref)\n        self.reload()\n\n    def reload(self):\n        \"\"\"Reload the metadata from the image file.\"\"\"\n        self._load()\n\n    def asdict(self) -&gt; dict[str, Any]:\n        \"\"\"Return the metadata as a dictionary.\"\"\"\n        dict_data = self.properties.copy()\n        dict_data[XMP] = self.xmp\n        return dict_data\n\n    def _load(self):\n        try:\n            del self._metadata_ref\n        except AttributeError:\n            pass\n        try:\n            del self._properties\n        except AttributeError:\n            pass\n        properties = load_image_properties(self.filepath)\n        self._properties = properties.mutableCopy()\n        del properties\n\n        metadata_ref = load_image_metadata_ref(self.filepath)\n        self._metadata_ref = metadata_ref_create_mutable_copy(metadata_ref)\n        del metadata_ref\n\n    def _xmp_set_from_str(self, xmp: str):\n        \"\"\"Set the XMP metadata from a string representing serialized XMP.\"\"\"\n\n        # The Apple API requires that the XMP data use double quotes for quoted strings\n        # and that the XMP data not contain the XMP packet headers\n        xmp = single_quotes_to_double_quotes(xmp)\n        xmp = strip_xmp_packet(xmp)\n        xmp = xmp.encode(\"utf-8\")\n        self._xmp_set_from_bytes(xmp)\n\n    def _xmp_set_from_bytes(self, xmp: bytes):\n        \"\"\"Set the XMP metadata from a bytes object representing serialized XMP.\"\"\"\n        metadata = metadata_ref_create_from_xmp(xmp)\n        self._metadata_ref = metadata_ref_create_mutable_copy(metadata)\n        del metadata\n\n    def __enter__(self):\n        \"\"\"Enter the context manager.\"\"\"\n        self._context_manager = True\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        \"\"\"Exit the context manager.\"\"\"\n        if self._context_manager:\n            self.write()\n            self.reload()\n        self._context_manager = False\n\n    def __del__(self):\n        if self._metadata_ref is not None:\n            del self._metadata_ref\n        if self._properties is not None:\n            del self._properties\n</code></pre>"},{"location":"reference/#cgmetadata.ImageMetadata.exif","title":"<code>exif: dict[str, Any]</code>  <code>property</code>","text":"<p>Return the EXIF properties dictionary from the image.</p>"},{"location":"reference/#cgmetadata.ImageMetadata.gps","title":"<code>gps: dict[str, Any]</code>  <code>property</code>","text":"<p>Return the GPS properties dictionary from the image.</p>"},{"location":"reference/#cgmetadata.ImageMetadata.iptc","title":"<code>iptc: dict[str, Any]</code>  <code>property</code>","text":"<p>Return the IPTC properties dictionary from the image.</p>"},{"location":"reference/#cgmetadata.ImageMetadata.properties","title":"<code>properties: dict[str, Any]</code>  <code>property</code>","text":"<p>Return the metadata properties dictionary from the image.</p> <p>The dictionary keys are named 'IPTC', 'EXIF', etc. Some of the values are themselves dictionaries. For example, the 'IPTC' value is a dictionary of IPTC metadata.</p> <p>Reference: https://developer.apple.com/documentation/imageio/image_properties?language=objc for more information.</p>"},{"location":"reference/#cgmetadata.ImageMetadata.tiff","title":"<code>tiff: dict[str, Any]</code>  <code>property</code>","text":"<p>Return the TIFF properties dictionary from the image.</p>"},{"location":"reference/#cgmetadata.ImageMetadata.xmp","title":"<code>xmp: dict[str, Any]</code>  <code>property</code>","text":"<p>Return the XMP metadata dictionary for the image.</p> <p>The dictionary keys are in form \"prefix:name\", e.g. \"dc:creator\".</p>"},{"location":"reference/#cgmetadata.ImageMetadata.__enter__","title":"<code>__enter__()</code>","text":"<p>Enter the context manager.</p> Source code in <code>cgmetadata/classes.py</code> <pre><code>def __enter__(self):\n    \"\"\"Enter the context manager.\"\"\"\n    self._context_manager = True\n    return self\n</code></pre>"},{"location":"reference/#cgmetadata.ImageMetadata.__exit__","title":"<code>__exit__(exc_type, exc_value, traceback)</code>","text":"<p>Exit the context manager.</p> Source code in <code>cgmetadata/classes.py</code> <pre><code>def __exit__(self, exc_type, exc_value, traceback):\n    \"\"\"Exit the context manager.\"\"\"\n    if self._context_manager:\n        self.write()\n        self.reload()\n    self._context_manager = False\n</code></pre>"},{"location":"reference/#cgmetadata.ImageMetadata.asdict","title":"<code>asdict()</code>","text":"<p>Return the metadata as a dictionary.</p> Source code in <code>cgmetadata/classes.py</code> <pre><code>def asdict(self) -&gt; dict[str, Any]:\n    \"\"\"Return the metadata as a dictionary.\"\"\"\n    dict_data = self.properties.copy()\n    dict_data[XMP] = self.xmp\n    return dict_data\n</code></pre>"},{"location":"reference/#cgmetadata.ImageMetadata.reload","title":"<code>reload()</code>","text":"<p>Reload the metadata from the image file.</p> Source code in <code>cgmetadata/classes.py</code> <pre><code>def reload(self):\n    \"\"\"Reload the metadata from the image file.\"\"\"\n    self._load()\n</code></pre>"},{"location":"reference/#cgmetadata.ImageMetadata.set","title":"<code>set(group, key, value)</code>","text":"<p>Set a metadata property for the image.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>Literal['EXIF', 'IPTC', 'TIFF', 'GPS', 'XMP']</code> <p>The metadata group type to set the property for, for example, \"IPTC\", \"XMP\"</p> required <code>key</code> <code>str</code> <p>The key or key path of the metadata property to set; for \"XMP\" metadata, the key is in form \"prefix:name\", e.g. \"dc:creator\", \"dc:description\"... for other metadata, the key is the name of the property, e.g. \"LensModel\", \"Make\", \"Keywords\"...</p> required <code>value</code> <code>Any</code> <p>The value to set the metadata property to.</p> required Note <p>This does not write the metadata to the image file unless used in conjunction with the context manager. Use write() to write the metadata to the image file after setting one or more values. Metadata keys may be specified as a literal string, e.g. \"LensModel\" or using one of the constants from the ImageIO module, e.g. kCGImagePropertyExifLensModel, which are referenced here: https://developer.apple.com/documentation/imageio/exif_dictionary_keys These are available in the pyobjc Quartz module as Quartz.kCGImagePropertyExifLensModel, etc. You are responsible for passing the correct type of value for the metadata key, for example, str or list[str]. See https://github.com/adobe/xmp-docs/tree/master for more information on XMP metadata and expected types.</p> Source code in <code>cgmetadata/classes.py</code> <pre><code>def set(\n    self,\n    group: Literal[\"EXIF\", \"IPTC\", \"TIFF\", \"GPS\", \"XMP\"],\n    key: str,\n    value: Any,\n):\n    \"\"\"Set a metadata property for the image.\n\n    Args:\n        group: The metadata group type to set the property for, for example, \"IPTC\", \"XMP\"\n        key: The key or key path of the metadata property to set;\n            for \"XMP\" metadata, the key is in form \"prefix:name\", e.g. \"dc:creator\", \"dc:description\"...\n            for other metadata, the key is the name of the property, e.g. \"LensModel\", \"Make\", \"Keywords\"...\n        value: The value to set the metadata property to.\n\n    Note:\n        This does not write the metadata to the image file unless used in conjunction with the context manager.\n        Use write() to write the metadata to the image file after setting one or more values.\n        Metadata keys may be specified as a literal string, e.g. \"LensModel\" or using\n        one of the constants from the ImageIO module, e.g. kCGImagePropertyExifLensModel,\n        which are referenced here: https://developer.apple.com/documentation/imageio/exif_dictionary_keys\n        These are available in the pyobjc Quartz module as Quartz.kCGImagePropertyExifLensModel, etc.\n        You are responsible for passing the correct type of value for the metadata key,\n        for example, str or list[str]. See https://github.com/adobe/xmp-docs/tree/master\n        for more information on XMP metadata and expected types.\n    \"\"\"\n    if group == XMP:\n        self._metadata_ref = metadata_ref_set_tag_with_path(\n            self._metadata_ref, key, value\n        )\n    else:\n        self._metadata_ref = metadata_ref_set_tag_for_dict(\n            self._metadata_ref, group, key, value\n        )\n</code></pre>"},{"location":"reference/#cgmetadata.ImageMetadata.write","title":"<code>write()</code>","text":"<p>Write the metadata to the image file then reloads the metadata from the image.</p> Source code in <code>cgmetadata/classes.py</code> <pre><code>def write(self):\n    \"\"\"Write the metadata to the image file then reloads the metadata from the image.\"\"\"\n    metadata_ref_write_to_file(self.filepath, self._metadata_ref)\n    self.reload()\n</code></pre>"},{"location":"reference/#cgmetadata.ImageMetadata.xmp_dump","title":"<code>xmp_dump(fp, header=True)</code>","text":"<p>Write the serialized XMP metadata for the image to a file.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>IO[str]</code> <p>The file pointer to write the XMP metadata to.</p> required <code>header</code> <code>bool</code> <p>If True, include the XMP packet header in the serialized XMP.</p> <code>True</code> Source code in <code>cgmetadata/classes.py</code> <pre><code>def xmp_dump(self, fp: IO[str], header: bool = True):\n    \"\"\"Write the serialized XMP metadata for the image to a file.\n\n    Args:\n        fp: The file pointer to write the XMP metadata to.\n        header: If True, include the XMP packet header in the serialized XMP.\n    \"\"\"\n    xmp = metadata_ref_serialize_xmp(self._metadata_ref).decode(\"utf-8\")\n    if header:\n        xmp = XMP_PACKET_HEADER + xmp + XMP_PACKET_FOOTER\n    fp.write(xmp)\n</code></pre>"},{"location":"reference/#cgmetadata.ImageMetadata.xmp_dumps","title":"<code>xmp_dumps(header=True)</code>","text":"<p>Return the serialized XMP metadata for the image.</p> <p>Parameters:</p> Name Type Description Default <code>header</code> <code>bool</code> <p>If True, include the XMP packet header in the serialized XMP.</p> <code>True</code> <p>Returns:</p> Type Description <code>str</code> <p>The serialized XMP metadata for the image as a string.</p> Source code in <code>cgmetadata/classes.py</code> <pre><code>def xmp_dumps(self, header: bool = True) -&gt; str:\n    \"\"\"Return the serialized XMP metadata for the image.\n\n    Args:\n        header: If True, include the XMP packet header in the serialized XMP.\n\n    Returns:\n        The serialized XMP metadata for the image as a string.\n    \"\"\"\n    xmp = metadata_ref_serialize_xmp(self._metadata_ref).decode(\"utf-8\")\n    if header:\n        xmp = f\"{XMP_PACKET_HEADER}\\n{xmp}\\n{XMP_PACKET_FOOTER}\"\n    return xmp\n</code></pre>"},{"location":"reference/#cgmetadata.ImageMetadata.xmp_load","title":"<code>xmp_load(fp)</code>","text":"<p>Load XMP metadata from a file.</p> <p>Parameters:</p> Name Type Description Default <code>fp</code> <code>IO[str]</code> <p>The file pointer to read the XMP metadata from.</p> required Note <p>This does not write the metadata to the image file. Use write() to write the loaded metadata to the image file. The XMP standard allows quoted strings to use either single or double quotes. For example, exiftool uses single quotes. However, the native macOS APIs (CGImageMetadataCreateFromXMPData) returns nil if the XMP data contains single quotes. This does not appear to be documented anywhere in the Apple documentation. This function replaces single quotes with double quotes to avoid this issue.</p> Source code in <code>cgmetadata/classes.py</code> <pre><code>def xmp_load(self, fp: IO[str]):\n    \"\"\"Load XMP metadata from a file.\n\n    Args:\n        fp: The file pointer to read the XMP metadata from.\n\n    Note:\n        This does not write the metadata to the image file.\n        Use write() to write the loaded metadata to the image file.\n        The XMP standard allows quoted strings to use either single or double quotes.\n        For example, exiftool uses single quotes. However, the native macOS APIs\n        (CGImageMetadataCreateFromXMPData) returns nil if the XMP data contains single quotes.\n        This does not appear to be documented anywhere in the Apple documentation.\n        This function replaces single quotes with double quotes to avoid this issue.\n    \"\"\"\n    xmp = fp.read()\n    self._xmp_set_from_str(xmp)\n</code></pre>"},{"location":"reference/#cgmetadata.ImageMetadata.xmp_loads","title":"<code>xmp_loads(xmp)</code>","text":"<p>Load XMP metadata from a string.</p> <p>Parameters:</p> Name Type Description Default <code>xmp</code> <code>str</code> <p>The XMP metadata as a string.</p> required <code>fix_quotes</code> <p>If True, replace single quotes with double quotes.</p> required Note <p>This does not write the metadata to the image file. Use write() to write the loaded metadata to the image file. The XMP standard allows quoted strings to use either single or double quotes. For example, exiftool uses single quotes. However, the native macOS APIs (CGImageMetadataCreateFromXMPData) returns nil if the XMP data contains single quotes. This does not appear to be documented anywhere in the Apple documentation. This function replaces single quotes with double quotes to avoid this issue.</p> Source code in <code>cgmetadata/classes.py</code> <pre><code>def xmp_loads(self, xmp: str):\n    \"\"\"Load XMP metadata from a string.\n\n    Args:\n        xmp: The XMP metadata as a string.\n        fix_quotes: If True, replace single quotes with double quotes.\n\n    Note:\n        This does not write the metadata to the image file.\n        Use write() to write the loaded metadata to the image file.\n        The XMP standard allows quoted strings to use either single or double quotes.\n        For example, exiftool uses single quotes. However, the native macOS APIs\n        (CGImageMetadataCreateFromXMPData) returns nil if the XMP data contains single quotes.\n        This does not appear to be documented anywhere in the Apple documentation.\n        This function replaces single quotes with double quotes to avoid this issue.\n    \"\"\"\n    self._xmp_set_from_str(xmp)\n</code></pre>"}]}